@page "{userId:int}"
@model CookingAssistantAPI.Pages.HomePageModel
@{
    ViewData["Title"] = "Home";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Home Specific CSS -->
    <link href="/css/home.css?v=@DateTime.Now.Ticks" rel="stylesheet" />
</head>
<body>
    <div class="container mt-5">
        <div class="d-flex justify-content-between align-items-center">
            <h1>Welcome, @Model.UserName!</h1>
            <div>
                <button class="btn btn-create-recipe me-2" onclick="redirectToCreateRecipe(@Model.UserId)">Create Recipe</button>
                <button class="btn btn-secondary me-2" onclick="redirectToProfile(@Model.UserId)">Profile</button>
                <button class="btn btn-logout" onclick="redirectToLogin()">
                    <img src="/images/logout_icon.svg?v=@DateTime.Now.Ticks" alt="Logout icon" /> Logout
                </button>
            </div>
        </div>

        <div class="col-md-6 position-relative">
    <input type="text" id="liveSearchBox" class="form-control" placeholder="Search recipes..." autocomplete="off" />
    <div id="searchDropdown" class="list-group position-absolute w-100" style="z-index: 1000;"></div>
</div>


        <!-- My Recipes Section -->
<div class="row mt-4">
    <h3>My Recipes</h3>
    <div class="d-flex flex-wrap">
        @foreach (var recipe in Model.MyRecipes)
        {
            <a href="@Url.Page("/RecipeDetails", new { recipeId = recipe.RecipeId, userId = @Model.UserId })" class="text-decoration-none text-dark">
                <div class="card" style="width: 18rem; margin: 10px;">
                    <img src="/api/recipes/@recipe.RecipeId/image" class="card-img-top" alt="@recipe.Title image">
                    <div class="card-body">
                        <h5 class="card-title">@recipe.Title</h5>
                    </div>
                </div>
            </a>
        }
    </div>
</div>

<!-- Top Rated Recipes Section -->
<div class="row mt-4">
    <h3>Top Rated Recipes</h3>
    <div class="d-flex flex-wrap">
        @foreach (var recipe in Model.TopRatedRecipes)
        {
            <a href="@Url.Page("/RecipeDetails", new { recipeId = recipe.RecipeId, userId = @Model.UserId })" class="text-decoration-none text-dark">
                <div class="card" style="width: 18rem; margin: 10px;">
                    <img src="/api/recipes/@recipe.RecipeId/image" class="card-img-top" alt="@recipe.Title image">
                    <div class="card-body">
                        <h5 class="card-title">@recipe.Title</h5>
                        <p class="card-text">Average Rating: @recipe.Ratings.Average(rt => rt.Value) / 5</p>
                    </div>
                </div>
            </a>
        }
    </div>
</div>

<!-- My Favourites Section -->
<div class="row mt-4">
    <h3>My Favourites</h3>
    <div class="d-flex flex-wrap" id="favouritesContainer">
        <!-- JavaScript will dynamically load the favourites here -->
    </div>
</div>


<!-- News Section -->
<div class="container mt-4">
    <h3 class="mb-3">Latest News</h3>
    <div class="d-flex flex-wrap justify-content-start">
        @foreach (var news in Model.NewsArticles)
        {
            <a href="@Url.Page("/NewsDetails", new { articleId = news.ArticleId, userId = @Model.UserId })" class="text-decoration-none text-dark">
                <div class="card" style="width: 18rem; margin: 10px;">
                    <img src="/api/news/@news.ArticleId/image" class="card-img-top" alt="@news.ArticleDescription image">
                    <div class="card-body">
                        <h5 class="card-title">@news.ArticleDescription</h5>
                        <p class="card-text">@news.ArticleContent.Substring(0, Math.Min(100, news.ArticleContent.Length))...</p>
                        <small class="text-muted">
                            Published on @news.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                        </small>
                    </div>
                </div>
            </a>
        }
    </div>
</div>


</div>

    </div>
    

    <script>
        // JavaScript function for redirecting to CreateRecipe page
        function redirectToCreateRecipe(userId) {
            window.location.href = `/CreateRecipe/${userId}`;
        }

        function redirectToProfile(userId) {
            window.location.href = `/Profile/${userId}`;
        }

        function redirectToLogin() {
            window.location.href = '/Login';
        }

        // Fetch favourites for the logged-in user
        async function loadFavourites() {
            try {
                const response = await fetch(`/api/favourites/${@Model.UserId}`);
                const favouritesContainer = document.getElementById('favouritesContainer');

                if (response.ok) {
                    const favourites = await response.json();
                    favouritesContainer.innerHTML = ''; // Clear existing content

                    favourites.forEach(favourite => {
                        const favouriteCard = `
                            <a href="/RecipeDetails/${favourite.recipeId}/${@Model.UserId}" class="text-decoration-none text-dark">
                                <div class="card" style="width: 18rem; margin: 10px;">
                                    <img src="${favourite.recipeImageUrl}" class="card-img-top" alt="${favourite.recipeTitle} image">
                                    <div class="card-body">
                                        <h5 class="card-title">${favourite.recipeTitle}</h5>
                                    </div>
                                </div>
                            </a>
                        `;
                        favouritesContainer.innerHTML += favouriteCard;
                    });
                } else if (response.status === 204) {
                    favouritesContainer.innerHTML = '<p>No favourites found.</p>';
                } else {
                    console.error('Failed to fetch favourites:', await response.text());
                }
            } catch (error) {
                console.error('Error fetching favourites:', error);
            }
        }

        // Load favourites on page load
        document.addEventListener('DOMContentLoaded', loadFavourites);

        const searchBox = document.getElementById('liveSearchBox');
    const dropdown = document.getElementById('searchDropdown');

    let debounceTimeout;

    searchBox.addEventListener('input', () => {
        clearTimeout(debounceTimeout);
        const query = searchBox.value.trim();

        // Delay fetch to avoid hammering server
        debounceTimeout = setTimeout(() => {
            if (query.length === 0) {
                dropdown.innerHTML = '';
                dropdown.style.display = 'none';
                return;
            }

            fetch(`/api/recipes/search?query=${encodeURIComponent(query)}`)
                .then(res => {
                    if (res.status === 204) {
                        dropdown.innerHTML = '<div class="list-group-item disabled">No results found</div>';
                        dropdown.style.display = 'block';
                        return [];
                    }
                    return res.json();
                })
                .then(data => {
                    if (!Array.isArray(data)) return;

                    if (data.length === 0) {
                        dropdown.innerHTML = '<div class="list-group-item disabled">No results found</div>';
                    } else {
                        dropdown.innerHTML = data.map(r => `
                            <a href="/RecipeDetails/${r.recipeId}/${@Model.UserId}" class="list-group-item list-group-item-action">
                                ${r.title}
                            </a>
                        `).join('');
                    }

                    dropdown.style.display = 'block';
                })
                .catch(err => {
                    console.error('Search error:', err);
                    dropdown.innerHTML = '<div class="list-group-item disabled">Error loading results</div>';
                    dropdown.style.display = 'block';
                });
        }, 300); // 300ms debounce
    });

    // Hide dropdown when clicking outside
    document.addEventListener('click', (event) => {
        if (!dropdown.contains(event.target) && event.target !== searchBox) {
            dropdown.style.display = 'none';
        }
    });

    </script>

    <!-- Bootstrap JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

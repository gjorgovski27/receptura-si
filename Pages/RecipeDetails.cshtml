@page "{recipeId:int}/{userId:int}"
@model CookingAssistantAPI.Pages.RecipeDetailsModel
@{
    ViewData["Title"] = "Recipe Details";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Recipe Details Specific CSS -->
    <link href="/css/recipedetails.css?v=@DateTime.Now.Ticks" rel="stylesheet" />
</head>

<body>
    <div class="container mt-5">
        <!-- Recipe Title, Average Rating, and Image -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="mb-3">@Model.Recipe.Title</h2>
            <div class="d-flex align-items-center">
                <div class="rating-section me-4">
                    <p>Average Rating: @Model.RecipeAverageRating / 5</p>
                    <div class="rating-stars" id="rating-stars">
                        @for (int i = 1; i <= 5; i++)
                        {
                            <img id="star-@i" src="/images/star_unused.svg" data-value="@i" alt="Star @i">
                        }
                    </div>
                </div>
                <button class="favourite-btn" id="favouriteButton" onclick="toggleFavourite()">
                    <svg xmlns="http://www.w3.org/2000/svg" height="38px" width="38px" viewBox="0 0 471.701 471.701">
                        <linearGradient id="gradientColor">
                            <stop offset="5%" stop-color="#7eaaff"></stop>
                            <stop offset="95%" stop-color="#ff48fb"></stop>
                        </linearGradient>
                        <g>
                            <path d="M433.601,67.001c-24.7-24.7-57.4-38.2-92.3-38.2s-67.7,13.6-92.4,38.3l-12.9,12.9l-13.1-13.1   
                                    c-24.7-24.7-57.6-38.4-92.5-38.4c-34.8,0-67.6,13.6-92.2,38.2c-24.7,24.7-38.3,57.5-38.2,92.4c0,34.9,13.7,67.6,38.4,92.3   
                                    l187.8,187.8c2.6,2.6,6.1,4,9.5,4c3.4,0,6.9-1.3,9.5-3.9l188.2-187.5c24.7-24.7,38.3-57.5,38.3-92.4   
                                    C471.801,124.501,458.301,91.701,433.601,67.001z M414.401,232.701l-178.7,178l-178.3-178.3c-19.6-19.6-30.4-45.6-30.4-73.3   
                                    s10.7-53.7,30.3-73.2c19.5-19.5,45.5-30.3,73.1-30.3c27.7,0,53.8,10.8,73.4,30.4l22.6,22.6c5.3,5.3,13.8,5.3,19.1,0l22.4-22.4   
                                    c19.6-19.6,45.7-30.4,73.3-30.4c27.6,0,53.6,10.8,73.2,30.3c19.6,19.6,30.3,45.6,30.3,73.3   
                                    C444.801,187.101,434.001,213.101,414.401,232.701z"></path>
                        </g>
                    </svg>
                </button>
            </div>
        </div>

        <!-- Recipe Image -->
        <div class="text-center mb-4">
            <img src="/api/recipes/@Model.Recipe.RecipeId/image" class="img-fluid rounded" alt="@Model.Recipe.Title image">
        </div>


        <!-- Recipe Description -->
        <div class="mb-4">
            <h4>Description</h4>
            <p>@Model.Recipe.Description</p>
        </div>

        <!-- Recipe Ingredients -->
        <div class="mb-4">
            <h4>Ingredients</h4>
            <ul>
                @foreach (var ingredient in Model.Recipe.Ingredients.Split('\n'))
                {
                    <li>@ingredient</li>
                }
            </ul>
        </div>

        <!-- Recipe Instructions -->
        <div class="mb-4">
            <h4>Instructions</h4>
            <ul>
                @foreach (var instruction in Model.Recipe.Instructions.Split('\n'))
                {
                    <li>@instruction</li>
                }
            </ul>
        </div>

        <!-- Comments Section -->
        <div class="comments-section mb-5">
            <h4>Comments</h4>
            <!-- Add New Comment -->
            <div class="mb-4">
                <textarea id="newCommentContent" class="form-control" rows="3" placeholder="Add a new comment..."></textarea>
                <button class="btn btn-primary mt-2" onclick="postComment()">Post</button>
            </div>

            <!-- Existing Comments -->
            <div id="commentsSection">
                <h5>Comments:</h5>
                <div id="commentsContainer" class="list-group">
                    <!-- JavaScript will inject comments here -->
                </div>
            </div>
        </div>
        @if (Model.UserId == Model.Recipe.CreatedByUserId)
{
    <div class="text-center mb-4">
        <button class="btn btn-danger" onclick="openDeleteRecipeModal()">Delete Recipe</button>
    </div>
}
    </div>

    <!-- Notification Container -->
    <div id="notificationContainer"></div>

   <!-- Delete Confirmation Modal -->
    <div class="delete-modal" id="deleteModal">
        <div class="delete-modal-content">
            <h4>Are you sure you want to delete this comment?</h4>
            <button class="btn btn-cancel" onclick="closeDeleteModal()">Cancel</button>
        <button class="btn btn-confirm" onclick="deleteComment()">Delete</button>
        </div>
    </div>

     <!-- Delete Recipe Confirmation Modal -->
    <div class="delete-modal" id="deleteRecipeModal">
        <div class="delete-modal-content">
            <h4>Are you sure you want to delete this recipe?</h4>
            <button class="btn btn-cancel" onclick="closeDeleteRecipeModal()">Cancel</button>
            <button class="btn btn-danger" onclick="deleteRecipe()">Delete</button>
        </div>
    </div>

    <!-- JavaScript -->
    <script>
        // Function to show a styled notification
        function showNotification(message, isError = false) {
            const notification = document.createElement('div');
            notification.className = 'notification';
            if (isError) {
                notification.classList.add('error');
            }
            notification.textContent = message;
            document.body.appendChild(notification);
            setTimeout(() => notification.classList.add('show'), 10);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 4000);
        }

        // Post a new comment
        async function postComment() {
            const content = document.getElementById("newCommentContent").value.trim();
            if (!content) {
                showNotification("Comment cannot be empty.", true);
                return;
            }

            try {
                const response = await fetch(`/api/comments/add`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        recipeId: @Model.Recipe.RecipeId,
                        userId: @Model.UserId,
                        content: content,
                    }),
                });

                if (response.ok) {
                    showNotification("Comment posted successfully.");
                    document.getElementById("newCommentContent").value = ""; // Clear text area
                    loadComments(); // Reload comments
                } else {
                    showNotification("Error posting comment. Please try again.", true);
                }
            } catch (error) {
                console.error("Error:", error);
                showNotification("An error occurred while posting your comment.", true);
            }
        }

        // Load comments
        async function loadComments() {
    try {
        const response = await fetch(`/api/comments/${@Model.RecipeId}`);
        if (response.status === 204) {
            document.getElementById("commentsContainer").innerHTML = "<p>No comments yet. Be the first to comment!</p>";
            return;
        }

        if (response.ok) {
            const comments = await response.json();
            const commentsContainer = document.getElementById("commentsContainer");
            commentsContainer.innerHTML = ""; // Clear existing comments
            comments.forEach(comment => {
                const commentItem = document.createElement("div");
                commentItem.classList.add("list-group-item", "comment-item");
                commentItem.innerHTML = `
                    <p class="comment-header"><strong>${comment.userName}</strong> <small class="text-muted">on ${new Date(comment.createdAt).toLocaleString()}</small></p>
                    <p>${comment.content}</p>
                    ${
                        comment.userId === @Model.UserId
                        ? `<button class="btn btn-sm btn-danger mt-1" onclick="openDeleteModal(${comment.commentId})">Delete</button>`
                        : ''
                    }
                `;
                commentsContainer.appendChild(commentItem);
            });
        } else {
            console.error('Failed to fetch comments:', await response.text());
        }
    } catch (error) {
        console.error('Error:', error);
    }
}

let deleteRecipeId = @Model.Recipe.RecipeId;

        function openDeleteRecipeModal() {
            document.getElementById("deleteRecipeModal").classList.add("show");
        }

        function closeDeleteRecipeModal() {
            document.getElementById("deleteRecipeModal").classList.remove("show");
        }

        async function deleteRecipe() {
            try {
                const response = await fetch(`/api/recipes/${deleteRecipeId}`, { method: 'DELETE' });

                if (response.ok) {
                    showNotification("Recipe deleted successfully.");
                    window.location.href = `/HomePage/@Model.UserId`; // Redirect to user's homepage
                } else {
                    showNotification("Error deleting recipe. Please try again.", true);
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification("An error occurred while deleting the recipe.", true);
            } finally {
                closeDeleteRecipeModal();
            }
        }

        // Toggle favourite
        async function toggleFavourite() {
            try {
                const removeResponse = await fetch(`/api/favourites/remove`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ recipeId: @Model.RecipeId, userId: @Model.UserId })
                });

                if (removeResponse.ok) {
                    showNotification('Recipe removed from favourites.');
                } else if (removeResponse.status === 404) {
                    const addResponse = await fetch(`/api/favourites/add`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ recipeId: @Model.RecipeId, userId: @Model.UserId })
                    });

                    if (addResponse.ok) {
                        showNotification('Recipe added to favourites.');
                    } else {
                        showNotification('Error adding to favourites. Please try again.', true);
                    }
                } else {
                    showNotification('Error toggling favourite status. Please try again.', true);
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('An error occurred while toggling favourite status.', true);
            }
        }

        // Delete a comment
        let deleteCommentId = null; // Variable to store the comment ID for deletion

function openDeleteModal(commentId) {
    deleteCommentId = commentId; // Set the comment ID for deletion
    document.getElementById("deleteModal").classList.add("show"); // Show the modal
}

function closeDeleteModal() {
    deleteCommentId = null; // Clear the stored comment ID
    document.getElementById("deleteModal").classList.remove("show"); // Hide the modal
}

// Confirm and delete the comment
async function deleteComment() {
    if (!deleteCommentId) return; // If no comment ID is set, do nothing

    try {
        const response = await fetch(`/api/comments/${deleteCommentId}`, { method: 'DELETE' });

        if (response.ok) {
            showNotification("Comment deleted successfully."); // Show success notification
            loadComments(); // Reload the comments section
        } else {
            showNotification("Error deleting comment. Please try again.", true); // Show error notification
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification("An error occurred while deleting the comment.", true); // Show error notification
    } finally {
        closeDeleteModal(); // Close the modal after the action
    }
}


        // Rate a recipe
        async function rateRecipe(ratingValue) {
            try {
                const response = await fetch(`/api/ratings/add`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId: @Model.UserId,
                        recipeId: @Model.RecipeId,
                        value: ratingValue
                    })
                });

                if (response.ok) {
                    showNotification("Rating submitted successfully.");
                    return true;
                } else {
                    console.error('Response status:', response.status);
                    console.error('Response body:', await response.text());
                    showNotification("Error submitting rating. Please try again.", true);
                    return false;
                }
            } catch (error) {
                console.error('Error occurred during rating submission:', error);
                showNotification("An error occurred while submitting your rating.", true);
                return false;
            }
        }

        // Highlight stars for rating
        function highlightStars(rating) {
            const stars = document.querySelectorAll(".rating-stars img");
            stars.forEach(star => {
                const starValue = parseInt(star.getAttribute("data-value"));
                star.src = (starValue <= rating) ? "/images/star_used.svg" : "/images/star_unused.svg";
            });
        }

        // Handle rating stars
        document.querySelectorAll(".rating-stars img").forEach(star => {
            star.addEventListener("mouseover", function () {
                const hoverValue = parseInt(this.getAttribute("data-value"));
                highlightStars(hoverValue);
            });

            star.addEventListener("mouseout", function () {
                if (currentUserRating > 0) {
                    highlightStars(currentUserRating);
                } else {
                    highlightStars(0);
                }
            });

            star.addEventListener("click", async function () {
                const ratingValue = parseInt(this.getAttribute("data-value"));
                currentUserRating = ratingValue;

                const success = await rateRecipe(ratingValue);
                if (success) {
                    highlightStars(ratingValue);
                }
            });
        });

        // Load comments on page load
        document.addEventListener("DOMContentLoaded", function () {
            loadComments();
        });
        // Attach confirmDeleteComment to the confirm button
        document.getElementById("confirmDeleteButton").onclick = confirmDeleteComment;
    </script>
</body>

</html>

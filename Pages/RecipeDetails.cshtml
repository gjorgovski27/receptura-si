@page "{recipeId:int}/{userId:int}"
@model CookingAssistantAPI.Pages.RecipeDetailsModel
@{
    ViewData["Title"] = "Recipe Details";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Recipe Details Specific CSS -->
    <link href="/css/recipedetails.css?v=@DateTime.Now.Ticks" rel="stylesheet" />
</head>

<body>
    <div class="container mt-5">
        <!-- Recipe Title, Average Rating, and Image -->
        <div class="text-center mb-4">
            <h2 class="mb-3">@Model.Recipe.Title</h2>
            <div class="rating-section">
                <p>Average Rating: @Model.RecipeAverageRating / 5</p>
                <div class="rating-stars" id="rating-stars">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <img id="star-@i" src="/images/star_unused.svg" data-value="@i" alt="Star @i">
                    }
                </div>
            </div>
            <img src="/api/recipes/@Model.Recipe.RecipeId/image" class="img-fluid rounded" alt="@Model.Recipe.Title image">
        </div>

        <!-- Recipe Description -->
        <div class="mb-4">
            <h4>Description</h4>
            <p>@Model.Recipe.Description</p>
        </div>

        <!-- Recipe Ingredients -->
        <div class="mb-4">
            <h4>Ingredients</h4>
            <ul>
                @foreach (var ingredient in Model.Recipe.Ingredients.Split('\n'))
                {
                    <li>@ingredient</li>
                }
            </ul>
        </div>

        <!-- Recipe Instructions -->
        <div class="mb-4">
            <h4>Instructions</h4>
            <ol>
                @foreach (var instruction in Model.Recipe.Instructions.Split('\n'))
                {
                    <li>@instruction</li>
                }
            </ol>
        </div>

        <!-- Comments Section -->
        <div class="comments-section mb-5">
            <h4>Comments</h4>
            <!-- Add New Comment -->
            <div class="mb-4">
                <textarea id="newCommentContent" class="form-control" rows="3" placeholder="Add a new comment..."></textarea>
                <button class="btn btn-primary mt-2" onclick="postComment()">Post</button>
            </div>

            <!-- Existing Comments -->
            <div id="commentsSection">
                <h5>Comments:</h5>
                <div id="commentsContainer" class="list-group">
                    <!-- JavaScript will inject comments here -->
                </div>
            </div>
        </div>

        <!-- Delete Recipe Button (Only if the user is allowed to delete it) -->
        @if (Model.CanDelete)
        {
            <div class="mb-4 text-center">
                <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete Recipe</button>
            </div>
        }
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this recipe?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                    <button type="button" class="btn btn-success" onclick="confirmDeleteRecipe(@Model.Recipe.RecipeId)">Yes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- JavaScript to handle rating, comments, and delete recipe -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const stars = document.querySelectorAll(".rating-stars img");
            let currentUserRating = @(Model.UserRating.HasValue ? Model.UserRating.Value.ToString() : "0");

            // Load comments on page load
            loadComments();
        });

        // Function to post a new comment
        async function postComment() {
            const content = document.getElementById("newCommentContent").value.trim();
            if (!content) {
                alert("Comment cannot be empty.");
                return;
            }

            try {
                const response = await fetch(`/api/comments/add`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        recipeId: @Model.RecipeId,
                        userId: @Model.UserId,
                        content: content
                    })
                });

                if (response.ok) {
                    alert("Comment posted successfully.");
                    document.getElementById("newCommentContent").value = ""; // Clear the text area
                    loadComments(); // Reload comments
                } else {
                    console.error('Error posting comment:', await response.text());
                    alert("Error posting comment. Please try again.");
                }
            } catch (error) {
                console.error('Error:', error);
                alert("An error occurred while posting your comment.");
            }
        }

        // Function to load all comments for the current recipe
        async function loadComments() {
            try {
                const response = await fetch(`/api/comments/${@Model.RecipeId}`);
                
                if (response.status === 204) {
                    // No content, simply clear the comments section or provide a message
                    document.getElementById("commentsContainer").innerHTML = "<p>No comments yet. Be the first to comment!</p>";
                    return;
                }

                if (response.ok) {
                    const comments = await response.json();
                    const commentsContainer = document.getElementById("commentsContainer");
                    commentsContainer.innerHTML = ""; // Clear existing comments

                    comments.forEach(comment => {
                        const commentItem = document.createElement("div");
                        commentItem.classList.add("list-group-item", "comment-item");
                        commentItem.innerHTML = `
                            <p class="comment-header"><strong>${comment.userName}</strong> <small class="text-muted">on ${new Date(comment.createdAt).toLocaleString()}</small></p>
                            <p>${comment.content}</p>
                            ${comment.userId === @Model.UserId ? `<button class="btn btn-sm btn-danger mt-1" onclick="deleteComment(${comment.commentId})">Delete</button>` : ''}
                        `;
                        commentsContainer.appendChild(commentItem);
                    });
                } else {
                    console.error('Failed to fetch comments:', await response.text());
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        // Function to delete a comment
        async function deleteComment(commentId) {
            if (!confirm("Are you sure you want to delete this comment?")) {
                return;
            }

            try {
                const response = await fetch(`/api/comments/${commentId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    alert("Comment deleted successfully.");
                    loadComments(); // Reload comments
                } else {
                    console.error('Error deleting comment:', await response.text());
                    alert("Error deleting comment. Please try again.");
                }
            } catch (error) {
                console.error('Error:', error);
                alert("An error occurred while deleting the comment.");
            }
        }

        // Function to highlight stars
        function highlightStars(rating) {
            const stars = document.querySelectorAll(".rating-stars img");
            stars.forEach(star => {
                const starValue = parseInt(star.getAttribute("data-value"));
                star.src = (starValue <= rating) ? "/images/star_used.svg" : "/images/star_unused.svg";
            });
        }

        // Rating functionality
        document.querySelectorAll(".rating-stars img").forEach(star => {
            star.addEventListener("mouseover", function () {
                const hoverValue = parseInt(this.getAttribute("data-value"));
                highlightStars(hoverValue);
            });

            star.addEventListener("mouseout", function () {
                if (currentUserRating > 0) {
                    highlightStars(currentUserRating); // Revert to user's current rating
                } else {
                    highlightStars(0); // Remove highlight if no rating
                }
            });

            star.addEventListener("click", async function () {
                const ratingValue = parseInt(this.getAttribute("data-value"));
                currentUserRating = ratingValue; // Update the user's current rating locally

                const success = await rateRecipe(ratingValue);
                if (success) {
                    highlightStars(ratingValue);
                    alert("Rating submitted successfully.");
                } else {
                    alert("Error submitting rating. Please try again.");
                }
            });
        });

        // Function to rate the recipe
        async function rateRecipe(ratingValue) {
            try {
                const response = await fetch(`/api/ratings/add`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId: @Model.UserId,
                        recipeId: @Model.RecipeId,
                        value: ratingValue
                    })
                });

                if (!response.ok) {
                    console.error('Response status:', response.status);
                    console.error('Response body:', await response.text());
                    return false;
                }

                return true;
            } catch (error) {
                console.error('Error occurred during rating submission:', error);
                return false;
            }
        }

        // JavaScript to delete recipe
        async function confirmDeleteRecipe(recipeId) {
            try {
                const response = await fetch(`/api/recipes/${recipeId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    alert("Recipe deleted successfully.");
                    window.location.href = `/HomePage/@Model.UserId`;
                } else {
                    alert("Error deleting recipe. Please try again.");
                }
            } catch (error) {
                console.error('Error:', error);
                alert("An error occurred while deleting the recipe.");
            }
        }
    </script>
</body>

</html>
